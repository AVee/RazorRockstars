@inherits ViewPage

@{
    ViewBag.Title = "Razor Rockstars";
}
<style type="text/css">
    body {
        font-size: 120%;
        line-height: 120%;
        background: #e6e6e6 url(/img/rip_jobs.png);
        background-attachment: fixed;
    }
    #page {
        border-top: 2px solid #BDBEC0;
        background: #fff url(/img/title-bg.png) no-repeat 0 5px;
    }
    #ss-link {
        position: absolute;
        display: block;
        width: 450px;
        height: 100px;
        margin: 0 0 0 -30px;
    }
    a {
        color: green;
    }
    h1 {
        color: seagreen;
    }
    h3 {
        color: skyblue;
        color: #666;
    }
    #visual-sitemap {
        float: right;
        width: 220px;
        margin: 0 -90px 0 0;
        padding: 0 0 0 48px;
    }
    #visual-sitemap a {
        display: block;
        margin: 20px 0 0 0;
        box-shadow: 0 3px 8px rgba(100, 100, 100, 0.3);
    }
    #visual-sitemap a.dead:hover {
        background: rgba(255,170,170,.5);
        background: rgba(255,255,204,.5);
    }
    #visual-sitemap a.alive:hover {
        background: rgba(170,255,170,.5);
    }
    #visual-sitemap img {
        padding: 5px;
        width: 150px;
    }
    .preview {
        padding: 5px;
        box-shadow: 0 3px 8px rgba(100, 100, 100, 0.3);
    }
    #sitemap {
        float: left;
        width: 480px;
    }
    ul {
        list-style-type: none;
    }
    li {
        font-weight: bold;    
    }
    li ul li {
        font-weight: normal;
    }
</style>
<div id="page">
      
     <div id="visual-sitemap">
         <a class="dead" href="/stars/dead/cobain"><img src="/img/thumb-05.jpg" /></a>
         <a class="alive" href="/stars/alive/grohl"><img src="/img/thumb-01.jpg" /></a>
         <a class="dead" href="/stars/dead/hendrix"><img src="/img/thumb-06.jpg" /></a>
         <a class="alive" href="/stars/alive/vedder"><img src="/img/thumb-02.jpg" /></a>
         <a class="dead" href="/stars/dead/jackson"><img src="/img/thumb-07.jpg" /></a>
         <a class="alive" href="/stars/alive/springsteen"><img src="/img/thumb-03.jpg" /></a>
         <a class="dead" href="/stars/dead/presley"><img src="/img/thumb-09.jpg" /></a>
         <a class="alive" href="/stars/alive/love"><img src="/img/thumb-04.jpg" /></a>
         <a class="dead" href="/stars/dead/joplin"><img src="/img/thumb-08.jpg" /></a>
     </div>

    <a id="ss-link" href="http://www.servicestack.net"></a>

    <h2 style="padding-top: 220px">ServiceStack's new HTML powers - the website framework</h2>
    <p>
        Razor Rockstars is a <a href="http://www.servicestack.net">ServiceStack</a> demo website 
        showcasing ServiceStack's new MVC Razor Engine support enriching its HTML story 
        with multiple view engines and No Controller / No Ceremony web development options.
        In many cases we've gone beyond what MVC provides with many new and natural features 
        optimized for developer happiness, fast iteration times and run-time performance 
        making website development in .NET / Mono more fun!
    </p>
     
    <img class="preview" src="/img/markup-impl.png" width="200" height="179" align="right" />
    <h3>All pages includes the code and markup used to render itself</h3>
     <p>
         To make it easier to explore features on this website and provide a better idea of how 
         everything works, all pages include the gists of the source code used to render itself. 
         Source code for this entire website is in the 
         <a href="https://github.com/ServiceStack/RazorRockstars">RazorRockstars Github project</a>.
     </p>

    <h2>Website framework features</h2>
    <p>
        We've added features beyond MVC in true ServiceStack-style: by enhancing your existing 
        services and working as expected from a REST service framework:
    </p>
    
    <ul>
        <li>
            Runs Everywhere
            <ul>
                <li><a href="#runs-everywhere">In ASP.NET or Self-host, first-class cross-platform support on .NET / Mono runtimes</a></li>
            </ul>
        </li>
        <li>
            Nothing to learn
            <ul>
                <li>Invisible API - just you and your IOC</li>
                <li>Add html views to your existing services</li>
                <li>Use the no-ceremony / no-controler / Typed or dynamic model options</li>
            </ul>
        </li>
        <li>
            One unified and complete Web + REST services stack
            <ul>
                <li>ViewEngines and HTML format is just another Content-Type</li>
                <li>HTML format supports multiple pluggable HTML view engines</li>
            </ul>
        </li>
        <li>
            Escape the Controller + Model + View forced architecture
            <ul>
                <li>Keep all views and their assets together</li>
                <li>Pretty urls for dynamic pages by default (no custom Routes needed)</li>
                <li>Default pages for directories</li>
                <li>Change views and Layout templates at runtime</li>
            </ul>
        </li>
        <li>
            The No Ceremony option
            <ul>
                <li>Dynamic pages without controllers</li>
                <li>Using typed Input View Model (Request DTO)</li>
                <li>Using dynamic View Model (Request DTO)</li>
            </ul>
        </li>
        <li>
            Smart Views pages
            <ul>
                <li>Feature-rich base classes</li>
                <li>Access IOC dependencies directly in Views</li>
                <li>Support for multiple base classes with different Razor .extensions</li>
                <li>Easily configure custom error pages in code</li>
            </ul>
        </li>
        <li>
            Markdown built-in
            <ul>
                <li>Maintain Content in Markdown</li>
                <li>Include Partial Markdown views in Razor pages</li>
                <li>Build entire website pages using just Markdown Razor + static _Layout.shtml templates</li>
                <li>Provide access to 'Markdown only' content</li>
            </ul>
        </li>
        <li>
            Optimized for developer productivity
            <ul>
                <li>Parallel compilation of Razor views at startup (in Debug mode)</li>
                <li>Automatic reload of modified views, layout templates and partials (in Debug mode)</li>
                <li>Great perforance, Optimized for run-time and iteration times</li>        
            </ul>
        </li>
    </ul>
    
    <a name="runs-everywhere"></a>
    <h2>Runs Everywhere</h2>
     <p>
         Like the rest of ServiceStack, you can create websites and REST services in any host on 
         any platform, e.g:
     </p>
    <ul>
        <li>Any ASP.NET host</li>
        <li>A Stand-alone, self-hosted HttpListener with external views</li>
        <li>A Stand-alone, self-hosted HttpListener with embedded Razor views in your ConsoleHost.exe</li>
        <li><a href="http://stackoverflow.com/a/12188358/85785">All the above on Linux with Mono</a></li>
    </ul>
    
    <a name="easy"></a>
    <h2>Nothing to learn</h2>
    <h3>Invisible API - just you and your IOC</h3>
    <p>
        One of ServiceStack's core objectives is to retain an invisible API that gets out of your way.
        The ServiceStack service itself is a classic example, it's just a 
        <a href="https://github.com/ServiceStack/RazorRockstars/blob/master/src/RazorRockstars.WebHost/RockstarsService.cs#L36">simple C# class</a> 
        auto-wired with your registered dependencies that just accepts any user-defined Request DTO and 
        lets you return any object that is automatically serialized into the expected Response Content-Type. 
        You retain complete control over the Request DTO, Implementation and returned Response.
    </p>
    <p>
        We refer to this style as <b>start from C# and project-out</b>, and is one of the key approaches 
        that allows us to maintain a frictionless dev workflow, i.e. instead of having your C# code bind 
        to a foreign API abstraction, ServiceStack builds functionality around your untainted C# classes 
        and DTOs (unhindered by artificial APIs).
        This makes your logic more re-usable and is how any new feature we add is immediately able to 
        work with your existing services with no code-changes required.
    </p>
    
    <h3>Add html views to your existing services</h3>
    <p>
        
    </p>

    <h3>Use the no-ceremony / no-controler / Typed or dynamic model options</h3>
    <p>
    </p>
    
    <a name="complte-stack"></a>
    <h2>Now a complete Web + REST services stack!</h2>
    <p>
        The new Razor and multiple HTML ViewEngine support now transforms ServiceStack from a 
        Web Services framework to a complete Website + REST/SOAP/MQ services stack which provides 
        a clean replacement for MVC, WCF or WebApi.
    </p>
    <p>
        This is a clean-break from the layers of legacy frameworks that have been added to ASP.NET 
        over the years. We've made everything simpler by removing all existing ASP.NET layers and
        xml-encumered providers and replaced them with clean, testable code-first providers based 
        on urls and clean POCOs - all working seamlessly together.
    </p>

    <h3>The one, true-unified and complete web stack</h3>
    <p>
        ServiceStack has 1 simple and unified HTTP stack. There is no duplicate or supplementary 
        functionality that only works for HTML vs Services. Everything is kept simple: 
        There is 1 set of Routes, 1 set of Request / Response filters.         
        All of ServiceStack's plugins and providers work equally well across all servies 
        (even from MVC / WebForms hybrid solutions).
    </p>

    <a name="reuse-services"></a>
    <h2>Reuse your existing services</h2>
    <p>
        HTML support has been added just as you would expect it to exist on a REST framework, you 
        can re-use your existing REST service implementation, where HTML is just another Content-Type. 
        e.g. You give your existing REST services a HTML view by just adding a Razor <b>.cshtml</b> 
        or Markdown <b>.md</b> view anywhere in the <b>/Views</b> directory with the same name as 
        your Request or Response DTO. The benefits of this are prominent, you only have a single 
        implementation for all your Mobile, Desktop or Web Browser clients. By default, 
        your clean C#-only services is accessible via HTML, JSON, XML, CSV, JSON, SOAP, ProtoBuf 
        and MQ endpoints - all with no effort.
    </p>
     
    <a name="no-ceremony"></a>
    <h2>The No Ceremony option - Web pages without Controllers</h2>
    <p>
        Many times (especially for read-heavy pages) you don't need any Controller and can just 
        call your dynamic Razor (or Markdown) pages directly. ServiceStack has very good support for
        this story that lets you omit the <b class="rzr">.cshtml</b> or <b class="md">.md</b>
        page extensions and it will still execute the appropriate page with the resulting pretty urls.
        When you do call pages with the .ext on it (as done by VS.NET when hitting F5 inside a page)
        it will automatically be re-directed to the pretty url (and not throw a YSOD as we've come to expect with MVC).
    </p>
    <p>
        Executing pages directly (i.e. without requiring a controller) is known as the PHP or ASP 'top-down' style.
        We've improved support for this option by allowing you to have Custom Base Pages with the 
        default Base Page already giving you access to multiple providers out-of-the-box like 
        ADO.NET's <b class="db">IDbConnection</b> as well as ServiceStack's clean 
        <a href="https://github.com/ServiceStack/ServiceStack/wiki/Sessions">Session</a> and
        <a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching">Caching</a> providers
        as well direct access to any of your own providers registered in your AppHost's IOC with:
        <b class="code">base.Get&lt;IYourProvider&gt;</b>.
    </p>
     
    <a href="https://github.com/ServiceStack/RazorRockstars/blob/master/src/RazorRockstars.WebHost/">
        <img src="/img/file-structure.png" align="left" width="289" height="965" />
    </a>

    <div id="sitemap">
        <h2>Sitemap Urls</h2>
        <ul>
            <li><a href="/rockstars">/rockstars</a></li>
            <li><a href="/TypedModelNoController">/TypedModelNoController</a></li>
            <li><a href="/NoModelNoController">/NoModelNoController</a></li>
        </ul>
        <h3>Rockstars still Rocking it</h3>
        <ul>
            <li><a href="/stars/alive/grohl">/stars/alive/grohl</a></li>
            <li><a href="/stars/alive/vedder">/stars/alive/vedder</a></li>
            <li><a href="/stars/alive/springsteen">/stars/alive/springsteen</a></li>
            <li><a href="/stars/alive/love">/stars/alive/love</a></li>
        </ul>
        <h3>Rockstars that have passed</h3>
        <ul>
            <li><a href="/stars/dead/cobain">/stars/dead/cobain</a></li>
            <li><a href="/stars/dead/hendrix">/stars/dead/hendrix</a></li>
            <li><a href="/stars/dead/jackson">/stars/dead/jackson</a></li>
            <li><a href="/stars/dead/joplin">/stars/dead/joplin</a></li>
            <li><a href="/stars/dead/presley">/stars/dead/presley</a></li>
        </ul>
    </div>
     
    <h2 style="color:#999">Developing...</h2>
    
    <b class="clear"></b>
</div>
 
 
<div id="preview">
    <h1>Implementation</h1>
    
    <h3><b>AppHost</b> <a href="https://github.com/ServiceStack/RazorRockstars/blob/master/src/RazorRockstars.WebHost/AppHost.cs">/AppHost.cs</a></h3>
    <p>
        In every ServiceStack web service there is a single AppHost which contains all your 
        services configuration and registration. Razor Rockstars AppHost is below which sets up the 
        following things in order:                
    </p>
    <ol>
        <li>Tells ServiceStack which Assemblies to scan for registering existing services</li>
        <li>Register the MVC Razor Plugin (requires .NET 4.0)</li>
        <li>Register which DB to use - Razor Rockstars uses OrmLite + Sqlite (32bit/Mono compat)</li>
        <li>Create the <b class="src">Rockstar</b> table if it doesn't already exist and insert all Seed Data</li>
        <li>Override ServiceStack's 404 Handler with the <b class="src">/NotFound.cshtml</b> Razor page</li>
    </ol>
    <script src="https://gist.github.com/3617557.js"></script>

</div>